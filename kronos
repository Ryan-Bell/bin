#!/bin/sh
# Summary: Shows kronos timecard related information
# Depends: jq
# TODO(ryan) totals for days option?
# TODO(ryan) simple flag that just outputs whether clocked in or not?
#			^ what do with credentials tho...

usage(){
	printf '%s\n' "usage: kronos [[-u username] | -h ]"
	printf '%s\n\t%s\n' "-u, --username" "Optionally pass in username"
	printf '%s\n\t%s\n' "-td, --total_day" "Will show the total hours for the day"
	printf '%s\n\t%s\n' "-tw, --total_week" "Will show the total hours for the week"
	printf '%s\n\t%s\n' "-h, --help" "Show this help and exit"
}

while [ "$1" != "" ]; do
	case $1 in
		-u | --username ) shift
			USERNAME=$1
			;;
		-td | --total_day )
			TOTAL_DAY=true
			;;
		-tw | --total_week )
			TOTAL_WEEK=true
			;;
		-si | --show_info )
			SHOW_INFO=true
			;;
		-h | --help )
			usage
			exit
			;;
		* )
			usage
			exit 1
	esac
	shift
done

if [ "$USERNAME" = "" ]; then
	printf "Username: "
	read -r USERNAME
fi

# breaking with CTRL+C will leave terminal broken
stty -echo
printf "Password: "
read -r PASSWORD
stty echo
printf "\\n"

convertsecs() {
	hour=$(($1/3600))
	minute=$((($1%3600)/60))
	printf "%dh %02dm\\n" $hour $minute
}

week_total=0
day_total=0
# TODO(ryan) don't just pick an old date, use since start of pay period
last_used_date=$(date --date="1 week ago" +%F)

# applydate duration_raw intime
update_hour_totals() {
	#convert to seconds for compare
	last_date_secs=$(date -d "$last_used_date" +%s)
	row_date_secs=$(date -d "$1" +%s)
	if [ "$row_date_secs" -gt "$last_date_secs" ]; then
		# not on the same day anymore,	reset the day
		day_total=0
		last_used_date="$1"
	fi
	if [ "$2" -le 0 ]; then
		# currently clocked in so use intime
		curr_time=$(date +%s)
		set -- "$1" $((curr_time-"$3")) "$3"
	fi
	day_total=$((day_total+"$2"))
	week_total=$((week_total+"$2"))
}

print_header() {
	printf "%-10s %10s %10s %10s\\n" "Date" "Duration" "InTime" "OutTime"
}

print_footer() {
	if [ "$TOTAL_WEEK" = true ]; then
		printf '%s ' "Total for week:"
		convertsecs "$week_total"
	fi

	if [ "$TOTAL_DAY" = true ]; then
		printf '%s ' "Total for day:"
		convertsecs "$day_total"
	fi
}

print_row() {
	printf "%10s %10s %10s %10s\\n" "$1" "$2" "$3" "$4"
}

parse_row() {
	while read -r data; do
		applydate=$(echo "$data" | jq -r '.applydate');
		duration_raw=$(echo "$data" | jq -r '.duration');
		duration=$(convertsecs "$duration_raw");
		intime_raw=$(echo "$data" | jq -r '.intime' | sed 's/\(.*\).../\1/');
		intime=$(date --date "@${intime_raw}" +%l:%M);
		outtime=$(echo "$data" | jq -r '.outtime' | sed 's/\(.*\).../\1/');
		outtime=$(date --date "@${outtime}" +%l:%M);
		update_hour_totals "$applydate" "$duration_raw" "$intime_raw"
		print_row "$applydate" "$duration" "$intime" "$outtime";
	done
	print_footer
}

print_info_row() {
	printf "%s %10s %10s %10s %10s %10s\\n" "Name" "" "Wage" "Badge" "Period Start" "Period End"
	printf "%s %10s %10s %10s %10s %10s\\n\\n" "$1" "$2" "$3" "$4" "$5" "$6"
}

parse_info() {
	while read -r data; do
		empid=$( echo "$data" | jq -r '.empid');
		firstname=$( echo "$data" | jq -r '.firstname');
		lastname=$( echo "$data" | jq -r '.lastname');
		wage=$( echo "$data" | jq -r '.wage');
		badge=$( echo "$data" | jq -r '.badge');
		ppstart=$( echo "$data" | jq -r '.payp_start');
		ppend=$( echo "$data" | jq -r '.payp_end');
		if [ "$SHOW_INFO" = true ]; then
			print_info_row "$firstname" "$lastname" "$wage" "$badge" "$ppstart" "$ppend"
		fi
	done
}

response=$(wget --save-cookies cookies.txt --keep-session-cookies --delete-after --quiet -S --method POST \
	--header 'cache-control: no-cache' \
	- "https://fastapps.rit.edu/kronosTimecard/login?username=${USERNAME}&password=${PASSWORD}" 2>&1)

# check for login error TODO(ryan) this seems fudgy
error=$(echo "$response" | grep 'login?error')
if [ "$error" != "" ]; then
	echo "Could not login - maybe wrong username or password?"
	exit 1
fi

overview_info=$(wget --load-cookies cookies.txt -qO- \
	"https://fastapps.rit.edu/kronosTimecard/rest/employeebyusername/${USERNAME}" \
	| jq --compact-output '.list[0] | {empid: .employeeid, firstname: .firstname, lastname: .lastname, wage: .basewagerate, badge: .badgenum, payp_start: .payperiods[0].start_date, payp_end: .payperiods[0].end_date}')

echo "$overview_info" | parse_info

employeeid=$(echo "$overview_info" | jq -r '.empid')

print_header

# range to grab
today=$(date +%F)
last_week=$(date --date="1 week ago" +%F)

wget --load-cookies cookies.txt -qO- \
	"https://fastapps.rit.edu/kronosTimecard/rest/timecard/${employeeid}/${last_week}/${today}" \
	| jq --compact-output '.punchlist[] | {applydate: .applydate, duration: .duration, intime: .in_datetime, outtime: .out_datetime}' | parse_row

rm cookies.txt

